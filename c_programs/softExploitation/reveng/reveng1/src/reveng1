#include <sys/socket.h>
#include <sys/types.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int main(void)
{
	int sockfd = -1;
	int status;
	ssize_t size;
	int exitcode = EXIT_FAILURE;
	struct addrinfo hints = { .ai_socktype = SOCK_STREAM };
	struct addrinfo *servinfo = NULL, *p;
	char buf[BUFSIZ];

	/* Lookup host. */
	status = getaddrinfo("127.0.0.1", "1090", &hints, &servinfo);
	if (0 != status) {
		fprintf(stderr, "error looking up towel.blinkenlights.nl: %s\n", gai_strerror(status));
		goto done;
	}

	/* Connect to host; first option that works wins. */
	for (p = servinfo; p != NULL; p = p->ai_next) {
		sockfd = socket(p->ai_family, p->ai_socktype, 0);
		if (-1 == sockfd) {
			continue;
		}

		if (-1 == connect(sockfd, p->ai_addr, p->ai_addrlen)) {
			close(sockfd);
			sockfd = -1;
			continue;
		}

		break;
	}

	if (-1 == sockfd) {
		fprintf(stderr, "failed to connect\n");
		goto done;
	}


	// int password = 12345678;
	const char *pass = "12345678\n";// remember new line character bcs of enter key for scanf
	size_t bufsize = send(sockfd, pass, strlen(pass)+1, 0);// strlen+1 for null terminator?

	printf("%zd\n",bufsize);

	/* Read all bytes from host, and write them to stdout. */
	for (;;) {
		size = recv(sockfd, buf, BUFSIZ - 1, 0);
		if (0 == size) {
			break;
		} else if (size > 0) {
			write(STDOUT_FILENO, buf, size);
		} else {
			perror("error reading from socket");
			goto done;
		}
	}

	exitcode = EXIT_SUCCESS;

done:
	if (-1 != sockfd) {
		close(sockfd);
	}

	if (NULL != servinfo) {
		freeaddrinfo(servinfo);
	}

	exit(exitcode);
}
